Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Лабораторна робота №5
з дисципліни: «Аналіз та рефакторинг коду»
на тему «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»





Перевірив:
викладач каф. ПІ
Сокорчук І.П	Виконала:
ст. гр. ПЗПІ-22-7
Лаврович Оксана Степанівна






Харків 2025
1.	Мета роботи
Розгорнути реалізовану програмну систему, перевірити та налаштувати
роботу розгорнутої програмної системи для сповіщення про небехпечні ситуації.

2.	Хід роботи
2.1	Опис розгорнутої програмної системи

Серверна частина:
•	Мова програмування: Серверна частина написана на JavaScript (Node.js).
•	Фреймворк: Використовується Express.js для створення REST API та обробки HTTP-запитів.
•	База даних: Система використовує MySQL для зберігання інформації. ORM Sequelize забезпечує зручну взаємодію з базою даних.
•	Маршрутизація: Реалізовані маршрути для управління підписками на загрози, обробки сповіщень та взаємодії з користувачами.
Функціональність:
Система сповіщення про небезпечні ситуації дозволяє користувачам підписуватися на певні типи загроз. У разі виявлення небезпеки, система автоматично визначає підписаних користувачів та надсилає їм сповіщення.
Основні можливості:
•	Управління користувачами та їх підписками на загрози.
•	Створення та обробка сповіщень про небезпечні події.
•	Збереження історії сповіщень для подальшого аналізу.
Інтеграція з IoT:
Система може отримувати дані від датчиків (наприклад, детекторів диму або камер) через HTTP-запити або MQTT. Це дозволяє в режимі реального часу реагувати на критичні ситуації.

2.2	Опис IoT-технологій та інтеграції

Використані пристрої та сенсори:
•	Arduino (ESP32): Використовується як мікроконтролер для збору даних із сенсорів та передачі на сервер.
•	DHT22: Вимірює температуру та вологість.
•	MQ-2 та MQ-135: Датчики для виявлення газових витоків та диму.
•	Wi-Fi-модуль: Використовується для підключення до мережі та відправки даних через MQTT-протокол.
Передача даних:
•	MQTT (Message Queuing Telemetry Transport): Дозволяє передавати дані у реальному часі на сервер через брокер HiveMQ.
•	Формат даних: JSON-структура, що містить показники температури, вологості, рівня газу та диму.
Використані інструменти:
•	Node.js (Express.js) – серверна частина.
•	MySQL + Sequelize – робота з базою даних.
•	Swagger – автоматична документація API.
•	MQTT – протокол передачі IoT-даних.
•	Postman – тестування API.
•	GitHub – управління версіями.
•	VS Code – розробка та налагодження коду.
Ця система дозволяє ефективно моніторити та сповіщати користувачів про можливі небезпеки, використовуючи IoT-технології та сучасні веб-інструменти.

2.3	Вимоги до середовища для розгортання програмної системи

Для успішного розгортання системи сповіщення про небезпечні ситуації важливо виконати кілька технічних вимог. Основою для роботи буде сучасна операційна система: Windows, macOS або Linux, на якій працюватиме серверна частина. Для цього необхідно мати Node.js, зокрема версію не нижче 14.0, а також пакетний менеджер npm, який дозволить легко керувати залежностями.
Для роботи з базою даних використовується MySQL з ORM Sequelize. Потрібно мати встановлену MySQL (версія 5.7 і вище), а також налаштувати підключення до бази даних у конфігураційному файлі. Для розробки API було використано Swagger для автоматичної генерації документації, що забезпечило зручний доступ до всіх кінцевих точок сервера.
Для стабільної роботи системи сервер має мати щонайменше 2 ГБ оперативної пам’яті, процесор з тактовою частотою не менше 2 ГГц і хоча б 10 ГБ вільного дискового простору для зберігання даних і файлів проєкту. Це гарантує безперебійну роботу при обробці запитів та інтеграції з іншими системами.

2.4	Розгортання серверної частини системи

Розгортання серверної частини передбачає кілька етапів. Спочатку потрібно завантажити архів з програмним кодом проєкту та розпакувати його в зручну директорію. Далі відкривається термінал, і з командного рядка потрібно перейти до кореневої директорії проєкту. Для ізоляції залежностей слід використовувати інструмент для керування пакетами, наприклад npm або yarn.
У файлі package.json будуть зазначені всі залежності, тому після завантаження проекту слід виконати команду npm install або yarn install, щоб встановити всі потрібні бібліотеки. 
Після цього для запуску серверної частини слід використовувати команду npm start або yarn start. Сервер стане доступним на локальному хості за адресою http://127.0.0.1:3000, де буде працювати API для сповіщення користувачів про небезпечні ситуації.

2.5	Розгортання IoT-системи

Для налаштування емульованого IoT-клієнта, необхідно розпакувати архів із його програмним кодом та пройти подібний процес налаштування. Знову ж таки, слід створити та активувати віртуальне середовище для ізоляції залежностей. Після цього потрібно встановити необхідні пакети і запустити емулюючий сервер за допомогою команд, описаних у документації проєкту. Всі дані про небезпечні ситуації будуть надходити від цього клієнта до серверу для подальшої обробки та сповіщення користувачів.

2.6	Конфігурація та створення бази даних

Для налаштування бази даних MySQL необхідно створити нову базу даних, використовуючи відповідні SQL-запити або інтерфейс MySQL Workbench. Після цього потрібно налаштувати Sequelize для роботи з базою даних. У файлі конфігурації потрібно зазначити дані для підключення до MySQL, а також визначити моделі, які будуть використовуватися для роботи з таблицями.
Крім того, слід налаштувати резервне копіювання бази даних, щоб уникнути втрат даних у разі помилок чи непередбачуваних ситуацій. Рекомендується регулярно створювати бекапи та зберігати їх на віддаленому сервері для зручного відновлення у разі потреби.

3.	 Висновки

У результаті розгортання програмної системи було успішно налаштовано всі необхідні компоненти: серверну частину, базу даних і емулятор IoT. Система готова до обробки даних про небезпечні ситуації і сповіщення користувачів у реальному часі. Ретельно налаштовані конфігураційні файли та залежності забезпечили стабільну роботу всіх частин системи, що є важливим для коректного функціонування. Це дає можливість без проблем розгортати систему в реальних умовах та ефективно керувати її процесами.

Посилання на GitHub: https://github.com/NureLavrovychOksana/arkpz-pzpi-22-7-lavrovych-oksana/tree/main/Task5

